install pipenv:
        # pip install pipenv

Create a new virtual environment and install django
        $ mkdir booktime
        $ cd booktime
        $ pipenv --three install Django


We now have an environment with Django installed. 
Because virtualenvs need to be activated before being used, we have to do so:
        $ pipenv shell

Now that it is active, we will create the initial skeleton of the project.
        $ django-admin startproject booktime .

When you created the Django project a bit earlier, a file called setting.py was initialized.
it contains constants.Everything in uppercase is considered configuration.How to import this file into our files:
        django.conf.settings.


LOGGING
Logging is a fundamental part of applications.
The goal of logging is to save time when problems happen, and to do so you need to be able to track what is happening during runtime.
Logging is important both for development and for production sites.
To start with, this LOGGING Django setting is about configuring the logging system using logging.config.dictConfig(). 

STATIC AND MEDIA CONFIGURATION 
Configuring static files
        $MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
        $MEDIA_URL = '/media/'

MIDDLEWARE
Middleware is a powerful feature of Django. It allows you to plug in extra code that will be executed at specific points of the HTTP request/response cycle. 
An example of this is the SessionMiddleware, which is used to associate sessions to users.
The order of which middleware components are specified matters. Some middleware components depend on the result of some others, and they would work only in one direction.
SessionMiddleware and AuthenticationMiddleware provide the basic functionalities for a project that has the concept of user. 
If you do not have user customizations on the site, you may remove them.
If you want to use caching on the view layer, you may want to look at the cache middleware. 
If you will serve content in multiple languages, the LocaleMiddleware class will do the language negotiation between the client and the server. 
There are many others; look at the Django middleware documentation for more details.


DATABASES

Your project will likely use a database to store data. 
One of the major benefits in using Django instead of a smaller framework is that this aspect is entirely managed for you. 
This is an initial configuration that uses PostgreSQL for storage:
PostgreSQL Drivers Installation
        $pipenv install psycopg2,

DATABASES = {
        'default': {
             'ENGINE': 'django.db.backends.postgresql',
              'NAME': 'mydatabase', 
              'USER': 'mydatabaseuser',
              'PASSWORD': 'mypassword',
              'PORT': '5432',
            }
}

GETTING BOOTSTRAP FILES INTO OUR PROJECTS
        $ mkdir main/static/
        $ mkdir main/static/css/
        $ mkdir main/static/js/
#Bootstrap css
        $curl -o main/static/css/bootstrap.min.css \https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/cssbootstrap.min.css
#Jquery.js
        $ curl -o main/static/js/jquery.min.js \https://code.jquery.com/jquery-3.2.1.slim.min.js
#Pooper.js
        $ curl -o main/static/js/popper.min.js \https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umdpopper.min.js
#Bootstrap js
        $ curl -o main/static/js/bootstrap.min.js \https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrapmin.js