install pipenv:
        # pip install pipenv

Create a new virtual environment and install django
        $ mkdir booktime
        $ cd booktime
        $ pipenv --three install Django


We now have an environment with Django installed. 
Because virtualenvs need to be activated before being used, we have to do so:
        $ pipenv shell

Now that it is active, we will create the initial skeleton of the project.
        $ django-admin startproject booktime .

When you created the Django project a bit earlier, a file called setting.py was initialized.
it contains constants.Everything in uppercase is considered configuration.How to import this file into our files:
        django.conf.settings.


LOGGING
Logging is a fundamental part of applications.
The goal of logging is to save time when problems happen, and to do so you need to be able to track what is happening during runtime.
Logging is important both for development and for production sites.
To start with, this LOGGING Django setting is about configuring the logging system using logging.config.dictConfig(). 

STATIC AND MEDIA CONFIGURATION 
Configuring static files
        $MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
        $MEDIA_URL = '/media/'

MIDDLEWARE
Middleware is a powerful feature of Django. It allows you to plug in extra code that will be executed at specific points of the HTTP request/response cycle. 
An example of this is the SessionMiddleware, which is used to associate sessions to users.
The order of which middleware components are specified matters. Some middleware components depend on the result of some others, and they would work only in one direction.
SessionMiddleware and AuthenticationMiddleware provide the basic functionalities for a project that has the concept of user. 
If you do not have user customizations on the site, you may remove them.
If you want to use caching on the view layer, you may want to look at the cache middleware. 
If you will serve content in multiple languages, the LocaleMiddleware class will do the language negotiation between the client and the server. 
There are many others; look at the Django middleware documentation for more details.


DATABASES

Your project will likely use a database to store data. 
One of the major benefits in using Django instead of a smaller framework is that this aspect is entirely managed for you. 
This is an initial configuration that uses PostgreSQL for storage:
PostgreSQL Drivers Installation
        $pipenv install psycopg2,

DATABASES = {
        'default': {
             'ENGINE': 'django.db.backends.postgresql',
              'NAME': 'mydatabase', 
              'USER': 'mydatabaseuser',
              'PASSWORD': 'mypassword',
              'PORT': '5432',
            }
}

GETTING BOOTSTRAP FILES INTO OUR PROJECTS
        $ mkdir main/static/
        $ mkdir main/static/css/
        $ mkdir main/static/js/
#Bootstrap css
        $curl -o main/static/css/bootstrap.min.css \https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/cssbootstrap.min.css
#Jquery.js
        $ curl -o main/static/js/jquery.min.js \https://code.jquery.com/jquery-3.2.1.slim.min.js
#Pooper.js
        $ curl -o main/static/js/popper.min.js \https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umdpopper.min.js
#Bootstrap js
        $ curl -o main/static/js/bootstrap.min.js \https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrapmin.js

IMAGES
For images to function it requires a library called pillow
        $pipenv install Pillow

DJANGO SIGNALS
Once an image is created we want a thumbnail to be generated automatically
And for this to happen we are going to be using signals
Django signals are like event listeners in javascript
create a file called signals for eact app and place your signals there
Once we have created a thumbnail signal we need to make sure that this file is initialized
when the django application is lauched by the internal django application registry
The suggested method to do this is adding a method called ready() in the application config inside main/apps.py
        $This is enough to make sure that signals are registered.

                from django.apps import AppConfig
                class MainConfig(AppConfig):
                        name = 'main'
                        def ready(self):
                                from . import signals

for user-uploaded files we need the following settings
                MEDIA_ROOT = os.path.join(BASE_DIR, "media")
                MEDIA_URL = "/media/"


QUERYSETS 
        • Product.objects.all(): Returns all products
        • Product.objects.filter(price__gt=Decimal("2.00")): Returns products with a price greater than 2.00
        • Product.objects.filter(price__lte=Decimal("2.00")): Returns products with a price less than (or equal to) 2.00
        • Product.objects.exclude(price__gt=Decimal("12.00")): Returns products with a price greater than 12.00
        • Product.objects.filter(price=Decimal("2.00")): Returns products with a price of exactly 2.00
        • Product.objects.filter(name__icontains="cathedral"): Returns products with names that contain the word “cathedral” (case insensitive)
        • ...filter(name__startswith="The", price__gt=Decimal("9.00")): Returns a combination of two clauses with an AND

All the preceding queries are limited to one table. 
If you need to match on fields that are in other tables,
 Django offer you a way to build JOINs while querying. 
 Product.objects.filter(producttag__name="sci-fi") is an example of this. 
 It will return products that have the tag “sci-fi” associated, and to calculate this it builds two extra JOINs: one with the linking table and another to the tag table.

If you want to build more advanced queries, like OR queries or queries that refer to other fields,
 you need to use django.db.models.Q objects or django.db.models.F objects.
Here are some examples:
        • ...filter(Q(name__startswith="The") | Q(price__gt=Decimal("9.00"))): Returns products whose name starts with “The” OR price is greater than 9.00.

        • ...filter(price__gt=F("price") – 1): Returns products with a price greater than the price itself minus 1. This is a silly example to prove how it works.


 MANAGERS 
 The reason we would want to build our own manager is to add extra methods that return filtered Querysets
 Given that we have an active filed in the Product model we are going to add a manager with a filter on that

 Re-Migrating or Reversing Migration
         $ python3 manage.py migrate main 0003_producttag
Reapply the migration
        $ python3 manage.py migrate main

Merging Migrations
To fix merging  migration errors them run 
        $python manage.py makemigrations --merge'

Starting with an empty migration
        $ ./manage.py makemigrations main --empty -n productname_capitalize

MANAGEMENT COMMANDS
loaddata and dumpdata are very useful as a simple data loading mechanism. 
They are used to bootstrap a database with data from fixtures, which are simple data files in a format that Django understands.
They can be JSON or XML and, as long as the structure is what Django dictates, they will be managed without any extra code.
We are going to leverage the loaddata and dumpdata commands to manage tags.
Tags will be a fixed set and managed by developers, and the fixture will be committed to the repository. 
We will also introduce another Django functionality called natural keys.
We can use Django admin to create those initially.
 After adding six tags (see Figure 3-8), we will export them with the dumpdata command.



SERIALIZATION AND NATURAL KEYS
Serialization, in Django, means converting data stored in a database table to something that can be written to a file. 
Django supports XML, JSON, and YAML file formats. 
Deserialization is the opposite operation, going from files to a populated database table.
Django offers serialization and deserialization facilities through both helper functions and management commands. 
We will focus on management commands for now. 
The following is an example of how to use the dumpdata command:
                $ ./manage.py dumpdata --indent 2 main.ProductTag
                #using natural keys to avaid database primary keys exposure
                $ ./manage.py dumpdata --indent 2 --natural-primary main.ProductTag


When loading data using natural keys, Django cannot use the natural_ key() method we defined already,
 because model loading happens through managers, not models themselves. 
 To be able to load tags back in, we need to create a Manager for that model and implement the get_by_ natural_key() method:
 To test this we can add some descriptions of tags in the file and reload them. If the data exists already in the database it will be updated
                $python3 manage.py loaddata main/fixtures/producttags.json

class ProductTagManager(models.Manager):
        def get_by_natural_key(self, slug):
                return self.get(slug=slug)

class ProductTag(models.Model):
        objects = ProductTagManager() 



IMPORTING DATA WITH A MANAGEMENT COMMAND
Besides the management commands that are already included,
 the project can also define new commands. Once created, they are available to be launched using the manage.py script.
We are going to create an ad hoc command to import products data.
In order to create a management command, you need to add a file inside main/management/commands/. 
The file name you choose will be the command name. 
There will be one management command per file; if you want to create multiple commands, you will need multiple files.
Every management command can take options: these are parsed with argparse, 
and Django has some conventions on specifying these as well.
To start the task of creating a management command, we first need to set up some basic folders:
                $ mkdir main/management 
                $ touch main/management/__init__.py
                 $ mkdir main/management/commands 
                 $ touch main/management/commands/__init__.py
These commands will make these folders Python modules, enabling Django to inspect and execute the content of them.
 Next we will create main/ management/commands/import_data.py, which will contain the importer:

WHAT IS HAPPENING IN THE : import_data.py new command file
There is much to explain in the code of this new import_data command. 
First of all, the add_arguments function: 
        Management commands can accept command-line options, and Django offers some options that are available to all commands (verbosity, for example), but this list can be extended.
We also added two positional arguments on top of all Django options. 
The first positional argument is the path to the CSV file to import, and the second is the path to the images directory. 
The syntax of add_argument is explained in the argparse module documentation, which is the Python module that Django is using.
The use of script arguments, instead of hard-coded variables, gives to this script flexibility. 
When running these imports in environments different than your machine’s environment, you may be using this in conjunction with other commands like wget or gunzip to download and decompress archives in temporary folders with dynamically generated names.
After opening the CSV file, the script cycles over the rows and tries to load (or generate) a product with the same name/price combination. The get_or_create function returns two values: a model and a boolean flag to indicate whether it is a new model.
Once we have a product loaded, we update its tag list by cycling through all the tags in the tags field in the CSV file. Given that CSVs are a flat format, this list need to be expanded from its contracted form (pipe-separated list).
Once tags are inserted, the script tries to open the image by joining the basedir and the specified file name, with os.path.join(). A new instance of the ProductImage model is created by passing the product and the opened file wrapped in an ImageFile object, which adds extra information about the file.

page:136